// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: xapp-cv-extract.proto

package xapp_cv_extract

import (
	context "context"
	types "github.com/xAmbit-ai/xaihr/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XappCVExtractClient is the client API for XappCVExtract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XappCVExtractClient interface {
	// MUST: this method is called by Pandora during xapp creation
	Init(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// MUST: Deletes a xapp
	DeleteXapp(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// MUST: the inference call
	Predict(ctx context.Context, in *ToPredict, opts ...grpc.CallOption) (*PredictionId, error)
	// returns stats for the last 14 days
	DailyStats(ctx context.Context, in *types.StatsRange, opts ...grpc.CallOption) (*XappDailyStats, error)
	// MUST: get input/ output mechanisms available
	GetIO(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*CvParseIO, error)
	// MUST: sets input/ output for this Xapp - this can happen ONLY when model select is done
	SetIO(ctx context.Context, in *CvParseIO, opts ...grpc.CallOption) (*CvParseIO, error)
	// Returns config associated with this xapp
	Config(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*Cfg, error)
	// Updates config for a xApp
	UpdateConfig(ctx context.Context, in *UpdateCfg, opts ...grpc.CallOption) (*Cfg, error)
	// Gets result
	GetPrediction(ctx context.Context, in *GetResultForJob, opts ...grpc.CallOption) (*ParseResult, error)
	// returns recent predictions
	Recent(ctx context.Context, in *types.RecentPredsInput, opts ...grpc.CallOption) (*RecentPreds, error)
}

type xappCVExtractClient struct {
	cc grpc.ClientConnInterface
}

func NewXappCVExtractClient(cc grpc.ClientConnInterface) XappCVExtractClient {
	return &xappCVExtractClient{cc}
}

func (c *xappCVExtractClient) Init(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) DeleteXapp(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/DeleteXapp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) Predict(ctx context.Context, in *ToPredict, opts ...grpc.CallOption) (*PredictionId, error) {
	out := new(PredictionId)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) DailyStats(ctx context.Context, in *types.StatsRange, opts ...grpc.CallOption) (*XappDailyStats, error) {
	out := new(XappDailyStats)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/DailyStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) GetIO(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*CvParseIO, error) {
	out := new(CvParseIO)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/GetIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) SetIO(ctx context.Context, in *CvParseIO, opts ...grpc.CallOption) (*CvParseIO, error) {
	out := new(CvParseIO)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/SetIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) Config(ctx context.Context, in *types.XappIdentifier, opts ...grpc.CallOption) (*Cfg, error) {
	out := new(Cfg)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) UpdateConfig(ctx context.Context, in *UpdateCfg, opts ...grpc.CallOption) (*Cfg, error) {
	out := new(Cfg)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) GetPrediction(ctx context.Context, in *GetResultForJob, opts ...grpc.CallOption) (*ParseResult, error) {
	out := new(ParseResult)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/GetPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xappCVExtractClient) Recent(ctx context.Context, in *types.RecentPredsInput, opts ...grpc.CallOption) (*RecentPreds, error) {
	out := new(RecentPreds)
	err := c.cc.Invoke(ctx, "/xapp_cv_extract.XappCVExtract/Recent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XappCVExtractServer is the server API for XappCVExtract service.
// All implementations must embed UnimplementedXappCVExtractServer
// for forward compatibility
type XappCVExtractServer interface {
	// MUST: this method is called by Pandora during xapp creation
	Init(context.Context, *types.XappIdentifier) (*emptypb.Empty, error)
	// MUST: Deletes a xapp
	DeleteXapp(context.Context, *types.XappIdentifier) (*emptypb.Empty, error)
	// MUST: the inference call
	Predict(context.Context, *ToPredict) (*PredictionId, error)
	// returns stats for the last 14 days
	DailyStats(context.Context, *types.StatsRange) (*XappDailyStats, error)
	// MUST: get input/ output mechanisms available
	GetIO(context.Context, *types.XappIdentifier) (*CvParseIO, error)
	// MUST: sets input/ output for this Xapp - this can happen ONLY when model select is done
	SetIO(context.Context, *CvParseIO) (*CvParseIO, error)
	// Returns config associated with this xapp
	Config(context.Context, *types.XappIdentifier) (*Cfg, error)
	// Updates config for a xApp
	UpdateConfig(context.Context, *UpdateCfg) (*Cfg, error)
	// Gets result
	GetPrediction(context.Context, *GetResultForJob) (*ParseResult, error)
	// returns recent predictions
	Recent(context.Context, *types.RecentPredsInput) (*RecentPreds, error)
	mustEmbedUnimplementedXappCVExtractServer()
}

// UnimplementedXappCVExtractServer must be embedded to have forward compatible implementations.
type UnimplementedXappCVExtractServer struct {
}

func (UnimplementedXappCVExtractServer) Init(context.Context, *types.XappIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedXappCVExtractServer) DeleteXapp(context.Context, *types.XappIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteXapp not implemented")
}
func (UnimplementedXappCVExtractServer) Predict(context.Context, *ToPredict) (*PredictionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedXappCVExtractServer) DailyStats(context.Context, *types.StatsRange) (*XappDailyStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyStats not implemented")
}
func (UnimplementedXappCVExtractServer) GetIO(context.Context, *types.XappIdentifier) (*CvParseIO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIO not implemented")
}
func (UnimplementedXappCVExtractServer) SetIO(context.Context, *CvParseIO) (*CvParseIO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIO not implemented")
}
func (UnimplementedXappCVExtractServer) Config(context.Context, *types.XappIdentifier) (*Cfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedXappCVExtractServer) UpdateConfig(context.Context, *UpdateCfg) (*Cfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedXappCVExtractServer) GetPrediction(context.Context, *GetResultForJob) (*ParseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrediction not implemented")
}
func (UnimplementedXappCVExtractServer) Recent(context.Context, *types.RecentPredsInput) (*RecentPreds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recent not implemented")
}
func (UnimplementedXappCVExtractServer) mustEmbedUnimplementedXappCVExtractServer() {}

// UnsafeXappCVExtractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XappCVExtractServer will
// result in compilation errors.
type UnsafeXappCVExtractServer interface {
	mustEmbedUnimplementedXappCVExtractServer()
}

func RegisterXappCVExtractServer(s grpc.ServiceRegistrar, srv XappCVExtractServer) {
	s.RegisterService(&XappCVExtract_ServiceDesc, srv)
}

func _XappCVExtract_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.XappIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).Init(ctx, req.(*types.XappIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_DeleteXapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.XappIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).DeleteXapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/DeleteXapp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).DeleteXapp(ctx, req.(*types.XappIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToPredict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).Predict(ctx, req.(*ToPredict))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_DailyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StatsRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).DailyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/DailyStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).DailyStats(ctx, req.(*types.StatsRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_GetIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.XappIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).GetIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/GetIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).GetIO(ctx, req.(*types.XappIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_SetIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CvParseIO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).SetIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/SetIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).SetIO(ctx, req.(*CvParseIO))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.XappIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).Config(ctx, req.(*types.XappIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).UpdateConfig(ctx, req.(*UpdateCfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_GetPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultForJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).GetPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/GetPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).GetPrediction(ctx, req.(*GetResultForJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _XappCVExtract_Recent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RecentPredsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XappCVExtractServer).Recent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xapp_cv_extract.XappCVExtract/Recent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XappCVExtractServer).Recent(ctx, req.(*types.RecentPredsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// XappCVExtract_ServiceDesc is the grpc.ServiceDesc for XappCVExtract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XappCVExtract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xapp_cv_extract.XappCVExtract",
	HandlerType: (*XappCVExtractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _XappCVExtract_Init_Handler,
		},
		{
			MethodName: "DeleteXapp",
			Handler:    _XappCVExtract_DeleteXapp_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _XappCVExtract_Predict_Handler,
		},
		{
			MethodName: "DailyStats",
			Handler:    _XappCVExtract_DailyStats_Handler,
		},
		{
			MethodName: "GetIO",
			Handler:    _XappCVExtract_GetIO_Handler,
		},
		{
			MethodName: "SetIO",
			Handler:    _XappCVExtract_SetIO_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _XappCVExtract_Config_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _XappCVExtract_UpdateConfig_Handler,
		},
		{
			MethodName: "GetPrediction",
			Handler:    _XappCVExtract_GetPrediction_Handler,
		},
		{
			MethodName: "Recent",
			Handler:    _XappCVExtract_Recent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xapp-cv-extract.proto",
}
