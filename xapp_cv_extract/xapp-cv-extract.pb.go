// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: xapp-cv-extract.proto

package xapp_cv_extract

import (
	types "github.com/xAmbit-ai/xaihr/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ToPredict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the xapp this guy is a part of
	Xapp *types.XappIdentifier `protobuf:"bytes,1,opt,name=xapp,proto3" json:"xapp,omitempty"`
	// id of the resume at source
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// the actual resume
	// 1. can be a binary blob of a resume file - pdf | docx - max size 5MB
	// 2. google cloud URL of a folder in xAmbit
	// 3. google cloud URL of a folder in some other org - must contain the details to access it
	// 4. s3 url - must contain additional information to access file
	// 5. HTML string
	// 6. a public URL of pdf or docx file
	//
	// Types that are assignable to Resume:
	//
	//	*ToPredict_File
	//	*ToPredict_Gcsxambit
	//	*ToPredict_Gcsexternal
	//	*ToPredict_S3External
	//	*ToPredict_Publicurl
	Resume isToPredict_Resume `protobuf_oneof:"resume"`
	// 8 - 15 reserved for other fields
	// webhook endpoint for a `POST` request that MUST contain `/xai` in it's path
	Hook *string `protobuf:"bytes,16,opt,name=hook,proto3,oneof" json:"hook,omitempty"`
	// a json stringified map<string, string> - this will be used as headers during hook call
	Hookauth *string `protobuf:"bytes,17,opt,name=hookauth,proto3,oneof" json:"hookauth,omitempty"`
	Test     *bool   `protobuf:"varint,18,opt,name=test,proto3,oneof" json:"test,omitempty"`
	// some sandbox id to be used as an idenfier for 3rd parties
	Sandbox *string `protobuf:"bytes,19,opt,name=sandbox,proto3,oneof" json:"sandbox,omitempty"`
}

func (x *ToPredict) Reset() {
	*x = ToPredict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToPredict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToPredict) ProtoMessage() {}

func (x *ToPredict) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToPredict.ProtoReflect.Descriptor instead.
func (*ToPredict) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{0}
}

func (x *ToPredict) GetXapp() *types.XappIdentifier {
	if x != nil {
		return x.Xapp
	}
	return nil
}

func (x *ToPredict) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ToPredict) GetResume() isToPredict_Resume {
	if m != nil {
		return m.Resume
	}
	return nil
}

func (x *ToPredict) GetFile() *File {
	if x, ok := x.GetResume().(*ToPredict_File); ok {
		return x.File
	}
	return nil
}

func (x *ToPredict) GetGcsxambit() *Gcs {
	if x, ok := x.GetResume().(*ToPredict_Gcsxambit); ok {
		return x.Gcsxambit
	}
	return nil
}

func (x *ToPredict) GetGcsexternal() *Gcs {
	if x, ok := x.GetResume().(*ToPredict_Gcsexternal); ok {
		return x.Gcsexternal
	}
	return nil
}

func (x *ToPredict) GetS3External() *S3 {
	if x, ok := x.GetResume().(*ToPredict_S3External); ok {
		return x.S3External
	}
	return nil
}

func (x *ToPredict) GetPublicurl() string {
	if x, ok := x.GetResume().(*ToPredict_Publicurl); ok {
		return x.Publicurl
	}
	return ""
}

func (x *ToPredict) GetHook() string {
	if x != nil && x.Hook != nil {
		return *x.Hook
	}
	return ""
}

func (x *ToPredict) GetHookauth() string {
	if x != nil && x.Hookauth != nil {
		return *x.Hookauth
	}
	return ""
}

func (x *ToPredict) GetTest() bool {
	if x != nil && x.Test != nil {
		return *x.Test
	}
	return false
}

func (x *ToPredict) GetSandbox() string {
	if x != nil && x.Sandbox != nil {
		return *x.Sandbox
	}
	return ""
}

type isToPredict_Resume interface {
	isToPredict_Resume()
}

type ToPredict_File struct {
	File *File `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

type ToPredict_Gcsxambit struct {
	Gcsxambit *Gcs `protobuf:"bytes,4,opt,name=gcsxambit,proto3,oneof"`
}

type ToPredict_Gcsexternal struct {
	Gcsexternal *Gcs `protobuf:"bytes,5,opt,name=gcsexternal,proto3,oneof"`
}

type ToPredict_S3External struct {
	S3External *S3 `protobuf:"bytes,6,opt,name=s3external,proto3,oneof"`
}

type ToPredict_Publicurl struct {
	// public URL MUST be HTTPs and point to a pdf or docx file
	Publicurl string `protobuf:"bytes,7,opt,name=publicurl,proto3,oneof"`
}

func (*ToPredict_File) isToPredict_Resume() {}

func (*ToPredict_Gcsxambit) isToPredict_Resume() {}

func (*ToPredict_Gcsexternal) isToPredict_Resume() {}

func (*ToPredict_S3External) isToPredict_Resume() {}

func (*ToPredict_Publicurl) isToPredict_Resume() {}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// allowed values are pdf | docx | html
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *File) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type Gcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// path including the file name. Must end with pdf or docx
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // later on we'll have other detauls to access this file like access key id, secret etc.
}

func (x *Gcs) Reset() {
	*x = Gcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gcs) ProtoMessage() {}

func (x *Gcs) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gcs.ProtoReflect.Descriptor instead.
func (*Gcs) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{2}
}

func (x *Gcs) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Gcs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// path including the file name. Must end with pdf or docx
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// 3-6 reserved
	AccessKeyId *string `protobuf:"bytes,6,opt,name=access_key_id,json=accessKeyId,proto3,oneof" json:"access_key_id,omitempty"`
	Secret      *string `protobuf:"bytes,7,opt,name=secret,proto3,oneof" json:"secret,omitempty"`
}

func (x *S3) Reset() {
	*x = S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3) ProtoMessage() {}

func (x *S3) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3.ProtoReflect.Descriptor instead.
func (*S3) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{3}
}

func (x *S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *S3) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *S3) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

type PredictionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job string `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// RFC3339 datetime
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// 3-11 reserved for future
	// possibly where this guy lies in queue
	Queuedat *int32 `protobuf:"varint,12,opt,name=queuedat,proto3,oneof" json:"queuedat,omitempty"`
}

func (x *PredictionId) Reset() {
	*x = PredictionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionId) ProtoMessage() {}

func (x *PredictionId) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionId.ProtoReflect.Descriptor instead.
func (*PredictionId) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{4}
}

func (x *PredictionId) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *PredictionId) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *PredictionId) GetQueuedat() int32 {
	if x != nil && x.Queuedat != nil {
		return *x.Queuedat
	}
	return 0
}

type UpdateCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCfg) Reset() {
	*x = UpdateCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCfg) ProtoMessage() {}

func (x *UpdateCfg) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCfg.ProtoReflect.Descriptor instead.
func (*UpdateCfg) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{5}
}

type Cfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Cfg) Reset() {
	*x = Cfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cfg) ProtoMessage() {}

func (x *Cfg) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cfg.ProtoReflect.Descriptor instead.
func (*Cfg) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{6}
}

type CvParseIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CvParseIO) Reset() {
	*x = CvParseIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvParseIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvParseIO) ProtoMessage() {}

func (x *CvParseIO) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvParseIO.ProtoReflect.Descriptor instead.
func (*CvParseIO) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{7}
}

type XappDailyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Daily  []*DailyStats    `protobuf:"bytes,1,rep,name=daily,proto3" json:"daily,omitempty"`
	Domain map[string]int32 `protobuf:"bytes,2,rep,name=domain,proto3" json:"domain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Src    map[string]int32 `protobuf:"bytes,3,rep,name=src,proto3" json:"src,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 4-9 reserved for future
	Resumes   *int64 `protobuf:"varint,10,opt,name=resumes,proto3,oneof" json:"resumes,omitempty"`
	Predtime  *int64 `protobuf:"varint,11,opt,name=predtime,proto3,oneof" json:"predtime,omitempty"`
	Monthbill *int32 `protobuf:"varint,12,opt,name=monthbill,proto3,oneof" json:"monthbill,omitempty"`
}

func (x *XappDailyStats) Reset() {
	*x = XappDailyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XappDailyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XappDailyStats) ProtoMessage() {}

func (x *XappDailyStats) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XappDailyStats.ProtoReflect.Descriptor instead.
func (*XappDailyStats) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{8}
}

func (x *XappDailyStats) GetDaily() []*DailyStats {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *XappDailyStats) GetDomain() map[string]int32 {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *XappDailyStats) GetSrc() map[string]int32 {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *XappDailyStats) GetResumes() int64 {
	if x != nil && x.Resumes != nil {
		return *x.Resumes
	}
	return 0
}

func (x *XappDailyStats) GetPredtime() int64 {
	if x != nil && x.Predtime != nil {
		return *x.Predtime
	}
	return 0
}

func (x *XappDailyStats) GetMonthbill() int32 {
	if x != nil && x.Monthbill != nil {
		return *x.Monthbill
	}
	return 0
}

type DailyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overall   *Stats            `protobuf:"bytes,1,opt,name=overall,proto3" json:"overall,omitempty"`
	Sandboxes map[string]*Stats `protobuf:"bytes,2,rep,name=sandboxes,proto3" json:"sandboxes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Date      *string           `protobuf:"bytes,10,opt,name=date,proto3,oneof" json:"date,omitempty"`
}

func (x *DailyStats) Reset() {
	*x = DailyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyStats) ProtoMessage() {}

func (x *DailyStats) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyStats.ProtoReflect.Descriptor instead.
func (*DailyStats) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{9}
}

func (x *DailyStats) GetOverall() *Stats {
	if x != nil {
		return x.Overall
	}
	return nil
}

func (x *DailyStats) GetSandboxes() map[string]*Stats {
	if x != nil {
		return x.Sandboxes
	}
	return nil
}

func (x *DailyStats) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resume        int32            `protobuf:"varint,1,opt,name=resume,proto3" json:"resume,omitempty"`
	Pages         int32            `protobuf:"varint,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Tokens        int64            `protobuf:"varint,3,opt,name=tokens,proto3" json:"tokens,omitempty"`
	AvgCompletion float32          `protobuf:"fixed32,4,opt,name=avg_completion,json=avgCompletion,proto3" json:"avg_completion,omitempty"`
	Tags          map[string]int32 `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Errors        int32            `protobuf:"varint,6,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{10}
}

func (x *Stats) GetResume() int32 {
	if x != nil {
		return x.Resume
	}
	return 0
}

func (x *Stats) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *Stats) GetTokens() int64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Stats) GetAvgCompletion() float32 {
	if x != nil {
		return x.AvgCompletion
	}
	return 0
}

func (x *Stats) GetTags() map[string]int32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Stats) GetErrors() int32 {
	if x != nil {
		return x.Errors
	}
	return 0
}

type CvParseDatapoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resume int32 `protobuf:"varint,1,opt,name=resume,proto3" json:"resume,omitempty"`
	Pages  int32 `protobuf:"varint,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Tokens int64 `protobuf:"varint,3,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *CvParseDatapoints) Reset() {
	*x = CvParseDatapoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvParseDatapoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvParseDatapoints) ProtoMessage() {}

func (x *CvParseDatapoints) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvParseDatapoints.ProtoReflect.Descriptor instead.
func (*CvParseDatapoints) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{11}
}

func (x *CvParseDatapoints) GetResume() int32 {
	if x != nil {
		return x.Resume
	}
	return 0
}

func (x *CvParseDatapoints) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *CvParseDatapoints) GetTokens() int64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

// Internal note:
// Completion: Meta[9] + Lang[1] + Skills[1] + WorkExp[2] + Education[2] = 15
type ExtractedCV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTargetFields    int32   `protobuf:"varint,1,opt,name=num_target_fields,json=numTargetFields,proto3" json:"num_target_fields,omitempty"`
	NumExtractedFields int32   `protobuf:"varint,2,opt,name=num_extracted_fields,json=numExtractedFields,proto3" json:"num_extracted_fields,omitempty"`
	Completion         float32 `protobuf:"fixed32,3,opt,name=completion,proto3" json:"completion,omitempty"`
	// 4 - 10 reserved for future
	NotProcessed *string   `protobuf:"bytes,11,opt,name=not_processed,json=notProcessed,proto3,oneof" json:"not_processed,omitempty"`
	Meta         *Meta     `protobuf:"bytes,12,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	Lang         *Lang     `protobuf:"bytes,13,opt,name=lang,proto3,oneof" json:"lang,omitempty"`
	Skills       *Skills   `protobuf:"bytes,14,opt,name=skills,proto3,oneof" json:"skills,omitempty"`
	Workex       *Workex   `protobuf:"bytes,15,opt,name=workex,proto3,oneof" json:"workex,omitempty"`
	Education    *Academic `protobuf:"bytes,16,opt,name=education,proto3,oneof" json:"education,omitempty"`
}

func (x *ExtractedCV) Reset() {
	*x = ExtractedCV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractedCV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedCV) ProtoMessage() {}

func (x *ExtractedCV) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedCV.ProtoReflect.Descriptor instead.
func (*ExtractedCV) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{12}
}

func (x *ExtractedCV) GetNumTargetFields() int32 {
	if x != nil {
		return x.NumTargetFields
	}
	return 0
}

func (x *ExtractedCV) GetNumExtractedFields() int32 {
	if x != nil {
		return x.NumExtractedFields
	}
	return 0
}

func (x *ExtractedCV) GetCompletion() float32 {
	if x != nil {
		return x.Completion
	}
	return 0
}

func (x *ExtractedCV) GetNotProcessed() string {
	if x != nil && x.NotProcessed != nil {
		return *x.NotProcessed
	}
	return ""
}

func (x *ExtractedCV) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ExtractedCV) GetLang() *Lang {
	if x != nil {
		return x.Lang
	}
	return nil
}

func (x *ExtractedCV) GetSkills() *Skills {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ExtractedCV) GetWorkex() *Workex {
	if x != nil {
		return x.Workex
	}
	return nil
}

func (x *ExtractedCV) GetEducation() *Academic {
	if x != nil {
		return x.Education
	}
	return nil
}

// Internal note: completion to include 9 params
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the most frequent `domain` appearing in the profile
	Domain    []string `protobuf:"bytes,1,rep,name=domain,proto3" json:"domain,omitempty"`
	Interests []string `protobuf:"bytes,2,rep,name=interests,proto3" json:"interests,omitempty"`
	// overall achievements if any
	Achievements []string    `protobuf:"bytes,3,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Location     []*Location `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	// 4 - 6 reserved for future
	Name    *string `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Phone   *string `protobuf:"bytes,8,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Email   *string `protobuf:"bytes,9,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Address *string `protobuf:"bytes,10,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// summary of his profile
	Summary *string `protobuf:"bytes,11,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	// this is in days
	Totalexp *int64 `protobuf:"varint,12,opt,name=totalexp,proto3,oneof" json:"totalexp,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{13}
}

func (x *Meta) GetDomain() []string {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Meta) GetInterests() []string {
	if x != nil {
		return x.Interests
	}
	return nil
}

func (x *Meta) GetAchievements() []string {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *Meta) GetLocation() []*Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Meta) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Meta) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *Meta) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Meta) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Meta) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *Meta) GetTotalexp() int64 {
	if x != nil && x.Totalexp != nil {
		return *x.Totalexp
	}
	return 0
}

type Lang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Languages []string `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"` // repeated float proficiency = 2;
}

func (x *Lang) Reset() {
	*x = Lang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lang) ProtoMessage() {}

func (x *Lang) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lang.ProtoReflect.Descriptor instead.
func (*Lang) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{14}
}

func (x *Lang) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

type Skills struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tools       []string `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
	Programming []string `protobuf:"bytes,2,rep,name=programming,proto3" json:"programming,omitempty"`
	Db          []string `protobuf:"bytes,3,rep,name=db,proto3" json:"db,omitempty"`
	Frameworks  []string `protobuf:"bytes,4,rep,name=frameworks,proto3" json:"frameworks,omitempty"`
	Softskills  []string `protobuf:"bytes,5,rep,name=softskills,proto3" json:"softskills,omitempty"`
}

func (x *Skills) Reset() {
	*x = Skills{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skills) ProtoMessage() {}

func (x *Skills) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skills.ProtoReflect.Descriptor instead.
func (*Skills) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{15}
}

func (x *Skills) GetTools() []string {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Skills) GetProgramming() []string {
	if x != nil {
		return x.Programming
	}
	return nil
}

func (x *Skills) GetDb() []string {
	if x != nil {
		return x.Db
	}
	return nil
}

func (x *Skills) GetFrameworks() []string {
	if x != nil {
		return x.Frameworks
	}
	return nil
}

func (x *Skills) GetSoftskills() []string {
	if x != nil {
		return x.Softskills
	}
	return nil
}

type Workex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs     []*WorkExp `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Intern   []*WorkExp `protobuf:"bytes,2,rep,name=intern,proto3" json:"intern,omitempty"`
	Projects []*Project `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *Workex) Reset() {
	*x = Workex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workex) ProtoMessage() {}

func (x *Workex) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workex.ProtoReflect.Descriptor instead.
func (*Workex) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{16}
}

func (x *Workex) GetJobs() []*WorkExp {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *Workex) GetIntern() []*WorkExp {
	if x != nil {
		return x.Intern
	}
	return nil
}

func (x *Workex) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type WorkExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName string `protobuf:"bytes,1,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	Designation string `protobuf:"bytes,2,opt,name=designation,proto3" json:"designation,omitempty"`
	Domain      string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// 4 - 7 reserved for future
	Skills           *string   `protobuf:"bytes,8,opt,name=skills,proto3,oneof" json:"skills,omitempty"`
	Responsibilities *string   `protobuf:"bytes,9,opt,name=responsibilities,proto3,oneof" json:"responsibilities,omitempty"`
	WorkStartDate    *string   `protobuf:"bytes,10,opt,name=work_start_date,json=workStartDate,proto3,oneof" json:"work_start_date,omitempty"`
	WorkEndDate      *string   `protobuf:"bytes,11,opt,name=work_end_date,json=workEndDate,proto3,oneof" json:"work_end_date,omitempty"`
	Months           *int32    `protobuf:"varint,12,opt,name=months,proto3,oneof" json:"months,omitempty"`
	Location         *Location `protobuf:"bytes,13,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *WorkExp) Reset() {
	*x = WorkExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkExp) ProtoMessage() {}

func (x *WorkExp) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkExp.ProtoReflect.Descriptor instead.
func (*WorkExp) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{17}
}

func (x *WorkExp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *WorkExp) GetDesignation() string {
	if x != nil {
		return x.Designation
	}
	return ""
}

func (x *WorkExp) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WorkExp) GetSkills() string {
	if x != nil && x.Skills != nil {
		return *x.Skills
	}
	return ""
}

func (x *WorkExp) GetResponsibilities() string {
	if x != nil && x.Responsibilities != nil {
		return *x.Responsibilities
	}
	return ""
}

func (x *WorkExp) GetWorkStartDate() string {
	if x != nil && x.WorkStartDate != nil {
		return *x.WorkStartDate
	}
	return ""
}

func (x *WorkExp) GetWorkEndDate() string {
	if x != nil && x.WorkEndDate != nil {
		return *x.WorkEndDate
	}
	return ""
}

func (x *WorkExp) GetMonths() int32 {
	if x != nil && x.Months != nil {
		return *x.Months
	}
	return 0
}

func (x *WorkExp) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type Academic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []string     `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	Education    []*Education `protobuf:"bytes,2,rep,name=education,proto3" json:"education,omitempty"`
	Research     []*Research  `protobuf:"bytes,3,rep,name=research,proto3" json:"research,omitempty"`
}

func (x *Academic) Reset() {
	*x = Academic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Academic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Academic) ProtoMessage() {}

func (x *Academic) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Academic.ProtoReflect.Descriptor instead.
func (*Academic) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{18}
}

func (x *Academic) GetCertificates() []string {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *Academic) GetEducation() []*Education {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *Academic) GetResearch() []*Research {
	if x != nil {
		return x.Research
	}
	return nil
}

type Education struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// awards: Vec<String>
	Institute    string   `protobuf:"bytes,1,opt,name=institute,proto3" json:"institute,omitempty"`
	Achievements []string `protobuf:"bytes,2,rep,name=achievements,proto3" json:"achievements,omitempty"`
	// 3 - 5 reserved for future
	Course    *string  `protobuf:"bytes,6,opt,name=course,proto3,oneof" json:"course,omitempty"`
	Year      *int32   `protobuf:"varint,7,opt,name=year,proto3,oneof" json:"year,omitempty"`
	Marks     *float32 `protobuf:"fixed32,9,opt,name=marks,proto3,oneof" json:"marks,omitempty"`
	MarksType *string  `protobuf:"bytes,10,opt,name=marks_type,json=marksType,proto3,oneof" json:"marks_type,omitempty"`
}

func (x *Education) Reset() {
	*x = Education{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Education) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Education) ProtoMessage() {}

func (x *Education) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Education.ProtoReflect.Descriptor instead.
func (*Education) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{19}
}

func (x *Education) GetInstitute() string {
	if x != nil {
		return x.Institute
	}
	return ""
}

func (x *Education) GetAchievements() []string {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *Education) GetCourse() string {
	if x != nil && x.Course != nil {
		return *x.Course
	}
	return ""
}

func (x *Education) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *Education) GetMarks() float32 {
	if x != nil && x.Marks != nil {
		return *x.Marks
	}
	return 0
}

func (x *Education) GetMarksType() string {
	if x != nil && x.MarksType != nil {
		return *x.MarksType
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City      string  `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	State     string  `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Country   string  `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Latitude  float32 `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{20}
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Location) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Research struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Research) Reset() {
	*x = Research{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Research) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Research) ProtoMessage() {}

func (x *Research) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Research.ProtoReflect.Descriptor instead.
func (*Research) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{21}
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Tools []string `protobuf:"bytes,2,rep,name=tools,proto3" json:"tools,omitempty"`
	// 3 - 9 reserved for future
	Client      *string `protobuf:"bytes,10,opt,name=client,proto3,oneof" json:"client,omitempty"`
	Date        *string `protobuf:"bytes,11,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Description *string `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Domain      *string `protobuf:"bytes,13,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
	Link        *string `protobuf:"bytes,14,opt,name=link,proto3,oneof" json:"link,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{22}
}

func (x *Project) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Project) GetTools() []string {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Project) GetClient() string {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return ""
}

func (x *Project) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Project) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *Project) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

type GetResultForJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xapp *types.XappIdentifier `protobuf:"bytes,1,opt,name=xapp,proto3" json:"xapp,omitempty"`
	Job  string                `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetResultForJob) Reset() {
	*x = GetResultForJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultForJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultForJob) ProtoMessage() {}

func (x *GetResultForJob) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultForJob.ProtoReflect.Descriptor instead.
func (*GetResultForJob) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{23}
}

func (x *GetResultForJob) GetXapp() *types.XappIdentifier {
	if x != nil {
		return x.Xapp
	}
	return nil
}

func (x *GetResultForJob) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

type ParseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xapp    *types.XappIdentifier `protobuf:"bytes,1,opt,name=xapp,proto3" json:"xapp,omitempty"`
	Id      string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Job     string                `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
	SrcId   string                `protobuf:"bytes,4,opt,name=src_id,json=srcId,proto3" json:"src_id,omitempty"`
	Created string                `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Updated string                `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	Status  int32                 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Elapsed int64                 `protobuf:"varint,8,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	// stages could be "extract" | "infer-queue" | "infer" | "done"
	Stage string `protobuf:"bytes,9,opt,name=stage,proto3" json:"stage,omitempty"`
	// 10 - 15 reserved for future
	Sandbox   *string      `protobuf:"bytes,16,opt,name=sandbox,proto3,oneof" json:"sandbox,omitempty"`
	Error     *string      `protobuf:"bytes,17,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Delivered *string      `protobuf:"bytes,18,opt,name=delivered,proto3,oneof" json:"delivered,omitempty"`
	Result    *ExtractedCV `protobuf:"bytes,19,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *ParseResult) Reset() {
	*x = ParseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseResult) ProtoMessage() {}

func (x *ParseResult) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseResult.ProtoReflect.Descriptor instead.
func (*ParseResult) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{24}
}

func (x *ParseResult) GetXapp() *types.XappIdentifier {
	if x != nil {
		return x.Xapp
	}
	return nil
}

func (x *ParseResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ParseResult) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *ParseResult) GetSrcId() string {
	if x != nil {
		return x.SrcId
	}
	return ""
}

func (x *ParseResult) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ParseResult) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *ParseResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ParseResult) GetElapsed() int64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *ParseResult) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *ParseResult) GetSandbox() string {
	if x != nil && x.Sandbox != nil {
		return *x.Sandbox
	}
	return ""
}

func (x *ParseResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *ParseResult) GetDelivered() string {
	if x != nil && x.Delivered != nil {
		return *x.Delivered
	}
	return ""
}

func (x *ParseResult) GetResult() *ExtractedCV {
	if x != nil {
		return x.Result
	}
	return nil
}

type CvParseStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain map[string]int32 `protobuf:"bytes,1,rep,name=domain,proto3" json:"domain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Src    map[string]int32 `protobuf:"bytes,2,rep,name=src,proto3" json:"src,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Pages  int32            `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Tokens int64            `protobuf:"varint,4,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *CvParseStats) Reset() {
	*x = CvParseStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xapp_cv_extract_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvParseStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvParseStats) ProtoMessage() {}

func (x *CvParseStats) ProtoReflect() protoreflect.Message {
	mi := &file_xapp_cv_extract_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvParseStats.ProtoReflect.Descriptor instead.
func (*CvParseStats) Descriptor() ([]byte, []int) {
	return file_xapp_cv_extract_proto_rawDescGZIP(), []int{25}
}

func (x *CvParseStats) GetDomain() map[string]int32 {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *CvParseStats) GetSrc() map[string]int32 {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CvParseStats) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *CvParseStats) GetTokens() int64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

var File_xapp_cv_extract_proto protoreflect.FileDescriptor

var file_xapp_cv_extract_proto_rawDesc = []byte{
	0x0a, 0x15, 0x78, 0x61, 0x70, 0x70, 0x2d, 0x63, 0x76, 0x2d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe1, 0x03, 0x0a, 0x09, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x78, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x78, 0x61, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x70, 0x70,
	0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x63, 0x73, 0x78,
	0x61, 0x6d, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61,
	0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x09, 0x67, 0x63, 0x73, 0x78, 0x61, 0x6d, 0x62, 0x69, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x67, 0x63, 0x73, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x63, 0x73,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x33, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53,
	0x33, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x33, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x75, 0x72, 0x6c, 0x12,
	0x17, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x6f, 0x6b,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x68, 0x6f,
	0x6f, 0x6b, 0x61, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x6f, 0x6f, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x61, 0x75, 0x74,
	0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x22, 0x2e, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c,
	0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x31, 0x0a, 0x03, 0x47, 0x63, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x02, 0x53, 0x33,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0x62, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x61, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67,
	0x22, 0x05, 0x0a, 0x03, 0x43, 0x66, 0x67, 0x22, 0x0b, 0x0a, 0x09, 0x43, 0x76, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x49, 0x4f, 0x22, 0xc1, 0x03, 0x0a, 0x0e, 0x58, 0x61, 0x70, 0x70, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x58, 0x61, 0x70,
	0x70, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x3a, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x58,
	0x61, 0x70, 0x70, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x72,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x62, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x53, 0x72, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x62, 0x69, 0x6c, 0x6c, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f,
	0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x54, 0x0a, 0x0e,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x76, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x11, 0x43, 0x76, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x22, 0x87, 0x04, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x56, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6e, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x78, 0x48, 0x04, 0x52, 0x06, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61,
	0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x48, 0x05, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x78,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87,
	0x03, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x65, 0x78,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x65, 0x78, 0x70, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x65, 0x78, 0x70, 0x22, 0x24, 0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x90,
	0x01, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x64,
	0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x45, 0x78, 0x70, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x45, 0x78, 0x70, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52,
	0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x22, 0x80, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x46, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x04, 0x78, 0x61, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x78, 0x61,
	0x70, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x22, 0xb4, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x78, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x78, 0x61, 0x70, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x56, 0x48,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x0c,
	0x43, 0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x72, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x53, 0x72, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xe4, 0x04, 0x0a, 0x0d, 0x58,
	0x61, 0x70, 0x70, 0x43, 0x56, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x04,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58,
	0x61, 0x70, 0x70, 0x12, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12,
	0x1a, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x61,
	0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x1f, 0x2e,
	0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x58, 0x61, 0x70, 0x70, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x49, 0x4f, 0x12, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x58, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x1a, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x49, 0x4f, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x4f, 0x12, 0x1a, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63,
	0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x76, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x49, 0x4f, 0x1a, 0x1a, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x49, 0x4f, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x58, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x1a, 0x14, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x66, 0x67, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x78, 0x61, 0x70,
	0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x66, 0x67, 0x1a, 0x14, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x66, 0x67, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x4a, 0x6f,
	0x62, 0x1a, 0x1c, 0x2e, 0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x78, 0x41, 0x6d, 0x62, 0x69, 0x74, 0x2d, 0x61, 0x69, 0x2f, 0x78, 0x61, 0x69, 0x68, 0x72, 0x2f,
	0x78, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x76, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xapp_cv_extract_proto_rawDescOnce sync.Once
	file_xapp_cv_extract_proto_rawDescData = file_xapp_cv_extract_proto_rawDesc
)

func file_xapp_cv_extract_proto_rawDescGZIP() []byte {
	file_xapp_cv_extract_proto_rawDescOnce.Do(func() {
		file_xapp_cv_extract_proto_rawDescData = protoimpl.X.CompressGZIP(file_xapp_cv_extract_proto_rawDescData)
	})
	return file_xapp_cv_extract_proto_rawDescData
}

var file_xapp_cv_extract_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_xapp_cv_extract_proto_goTypes = []interface{}{
	(*ToPredict)(nil),            // 0: xapp_cv_extract.ToPredict
	(*File)(nil),                 // 1: xapp_cv_extract.File
	(*Gcs)(nil),                  // 2: xapp_cv_extract.Gcs
	(*S3)(nil),                   // 3: xapp_cv_extract.S3
	(*PredictionId)(nil),         // 4: xapp_cv_extract.PredictionId
	(*UpdateCfg)(nil),            // 5: xapp_cv_extract.UpdateCfg
	(*Cfg)(nil),                  // 6: xapp_cv_extract.Cfg
	(*CvParseIO)(nil),            // 7: xapp_cv_extract.CvParseIO
	(*XappDailyStats)(nil),       // 8: xapp_cv_extract.XappDailyStats
	(*DailyStats)(nil),           // 9: xapp_cv_extract.DailyStats
	(*Stats)(nil),                // 10: xapp_cv_extract.Stats
	(*CvParseDatapoints)(nil),    // 11: xapp_cv_extract.CvParseDatapoints
	(*ExtractedCV)(nil),          // 12: xapp_cv_extract.ExtractedCV
	(*Meta)(nil),                 // 13: xapp_cv_extract.Meta
	(*Lang)(nil),                 // 14: xapp_cv_extract.Lang
	(*Skills)(nil),               // 15: xapp_cv_extract.Skills
	(*Workex)(nil),               // 16: xapp_cv_extract.Workex
	(*WorkExp)(nil),              // 17: xapp_cv_extract.WorkExp
	(*Academic)(nil),             // 18: xapp_cv_extract.Academic
	(*Education)(nil),            // 19: xapp_cv_extract.Education
	(*Location)(nil),             // 20: xapp_cv_extract.Location
	(*Research)(nil),             // 21: xapp_cv_extract.Research
	(*Project)(nil),              // 22: xapp_cv_extract.Project
	(*GetResultForJob)(nil),      // 23: xapp_cv_extract.GetResultForJob
	(*ParseResult)(nil),          // 24: xapp_cv_extract.ParseResult
	(*CvParseStats)(nil),         // 25: xapp_cv_extract.CvParseStats
	nil,                          // 26: xapp_cv_extract.XappDailyStats.DomainEntry
	nil,                          // 27: xapp_cv_extract.XappDailyStats.SrcEntry
	nil,                          // 28: xapp_cv_extract.DailyStats.SandboxesEntry
	nil,                          // 29: xapp_cv_extract.Stats.TagsEntry
	nil,                          // 30: xapp_cv_extract.CvParseStats.DomainEntry
	nil,                          // 31: xapp_cv_extract.CvParseStats.SrcEntry
	(*types.XappIdentifier)(nil), // 32: types.XappIdentifier
	(*types.StatsRange)(nil),     // 33: types.StatsRange
	(*emptypb.Empty)(nil),        // 34: google.protobuf.Empty
}
var file_xapp_cv_extract_proto_depIdxs = []int32{
	32, // 0: xapp_cv_extract.ToPredict.xapp:type_name -> types.XappIdentifier
	1,  // 1: xapp_cv_extract.ToPredict.file:type_name -> xapp_cv_extract.File
	2,  // 2: xapp_cv_extract.ToPredict.gcsxambit:type_name -> xapp_cv_extract.Gcs
	2,  // 3: xapp_cv_extract.ToPredict.gcsexternal:type_name -> xapp_cv_extract.Gcs
	3,  // 4: xapp_cv_extract.ToPredict.s3external:type_name -> xapp_cv_extract.S3
	9,  // 5: xapp_cv_extract.XappDailyStats.daily:type_name -> xapp_cv_extract.DailyStats
	26, // 6: xapp_cv_extract.XappDailyStats.domain:type_name -> xapp_cv_extract.XappDailyStats.DomainEntry
	27, // 7: xapp_cv_extract.XappDailyStats.src:type_name -> xapp_cv_extract.XappDailyStats.SrcEntry
	10, // 8: xapp_cv_extract.DailyStats.overall:type_name -> xapp_cv_extract.Stats
	28, // 9: xapp_cv_extract.DailyStats.sandboxes:type_name -> xapp_cv_extract.DailyStats.SandboxesEntry
	29, // 10: xapp_cv_extract.Stats.tags:type_name -> xapp_cv_extract.Stats.TagsEntry
	13, // 11: xapp_cv_extract.ExtractedCV.meta:type_name -> xapp_cv_extract.Meta
	14, // 12: xapp_cv_extract.ExtractedCV.lang:type_name -> xapp_cv_extract.Lang
	15, // 13: xapp_cv_extract.ExtractedCV.skills:type_name -> xapp_cv_extract.Skills
	16, // 14: xapp_cv_extract.ExtractedCV.workex:type_name -> xapp_cv_extract.Workex
	18, // 15: xapp_cv_extract.ExtractedCV.education:type_name -> xapp_cv_extract.Academic
	20, // 16: xapp_cv_extract.Meta.location:type_name -> xapp_cv_extract.Location
	17, // 17: xapp_cv_extract.Workex.jobs:type_name -> xapp_cv_extract.WorkExp
	17, // 18: xapp_cv_extract.Workex.intern:type_name -> xapp_cv_extract.WorkExp
	22, // 19: xapp_cv_extract.Workex.projects:type_name -> xapp_cv_extract.Project
	20, // 20: xapp_cv_extract.WorkExp.location:type_name -> xapp_cv_extract.Location
	19, // 21: xapp_cv_extract.Academic.education:type_name -> xapp_cv_extract.Education
	21, // 22: xapp_cv_extract.Academic.research:type_name -> xapp_cv_extract.Research
	32, // 23: xapp_cv_extract.GetResultForJob.xapp:type_name -> types.XappIdentifier
	32, // 24: xapp_cv_extract.ParseResult.xapp:type_name -> types.XappIdentifier
	12, // 25: xapp_cv_extract.ParseResult.result:type_name -> xapp_cv_extract.ExtractedCV
	30, // 26: xapp_cv_extract.CvParseStats.domain:type_name -> xapp_cv_extract.CvParseStats.DomainEntry
	31, // 27: xapp_cv_extract.CvParseStats.src:type_name -> xapp_cv_extract.CvParseStats.SrcEntry
	10, // 28: xapp_cv_extract.DailyStats.SandboxesEntry.value:type_name -> xapp_cv_extract.Stats
	32, // 29: xapp_cv_extract.XappCVExtract.Init:input_type -> types.XappIdentifier
	32, // 30: xapp_cv_extract.XappCVExtract.DeleteXapp:input_type -> types.XappIdentifier
	0,  // 31: xapp_cv_extract.XappCVExtract.Predict:input_type -> xapp_cv_extract.ToPredict
	33, // 32: xapp_cv_extract.XappCVExtract.DailyStats:input_type -> types.StatsRange
	32, // 33: xapp_cv_extract.XappCVExtract.GetIO:input_type -> types.XappIdentifier
	7,  // 34: xapp_cv_extract.XappCVExtract.SetIO:input_type -> xapp_cv_extract.CvParseIO
	32, // 35: xapp_cv_extract.XappCVExtract.Config:input_type -> types.XappIdentifier
	5,  // 36: xapp_cv_extract.XappCVExtract.UpdateConfig:input_type -> xapp_cv_extract.UpdateCfg
	23, // 37: xapp_cv_extract.XappCVExtract.GetPrediction:input_type -> xapp_cv_extract.GetResultForJob
	34, // 38: xapp_cv_extract.XappCVExtract.Init:output_type -> google.protobuf.Empty
	34, // 39: xapp_cv_extract.XappCVExtract.DeleteXapp:output_type -> google.protobuf.Empty
	4,  // 40: xapp_cv_extract.XappCVExtract.Predict:output_type -> xapp_cv_extract.PredictionId
	8,  // 41: xapp_cv_extract.XappCVExtract.DailyStats:output_type -> xapp_cv_extract.XappDailyStats
	7,  // 42: xapp_cv_extract.XappCVExtract.GetIO:output_type -> xapp_cv_extract.CvParseIO
	7,  // 43: xapp_cv_extract.XappCVExtract.SetIO:output_type -> xapp_cv_extract.CvParseIO
	6,  // 44: xapp_cv_extract.XappCVExtract.Config:output_type -> xapp_cv_extract.Cfg
	6,  // 45: xapp_cv_extract.XappCVExtract.UpdateConfig:output_type -> xapp_cv_extract.Cfg
	24, // 46: xapp_cv_extract.XappCVExtract.GetPrediction:output_type -> xapp_cv_extract.ParseResult
	38, // [38:47] is the sub-list for method output_type
	29, // [29:38] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_xapp_cv_extract_proto_init() }
func file_xapp_cv_extract_proto_init() {
	if File_xapp_cv_extract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xapp_cv_extract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToPredict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvParseIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XappDailyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvParseDatapoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractedCV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skills); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Academic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Education); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Research); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultForJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xapp_cv_extract_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvParseStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xapp_cv_extract_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ToPredict_File)(nil),
		(*ToPredict_Gcsxambit)(nil),
		(*ToPredict_Gcsexternal)(nil),
		(*ToPredict_S3External)(nil),
		(*ToPredict_Publicurl)(nil),
	}
	file_xapp_cv_extract_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_xapp_cv_extract_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xapp_cv_extract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xapp_cv_extract_proto_goTypes,
		DependencyIndexes: file_xapp_cv_extract_proto_depIdxs,
		MessageInfos:      file_xapp_cv_extract_proto_msgTypes,
	}.Build()
	File_xapp_cv_extract_proto = out.File
	file_xapp_cv_extract_proto_rawDesc = nil
	file_xapp_cv_extract_proto_goTypes = nil
	file_xapp_cv_extract_proto_depIdxs = nil
}
